<?php

/**
 * @file
 * UTexas Pantheon Logs HTTP module.
 */

use GuzzleHttp\Exception\RequestException;
use Drupal\Core\Utility\UpdateException;

/**
 * Runs on shutdown to clean up and display developer information.
 *
 * @see \Drupal\utexas_pantheon_logs_http\EventSubscriber\LogsHttpEventSubscriber
 */
function utexas_pantheon_logs_http_shutdown() {
  /** @var \Drupal\utexas_pantheon_logs_http\Logger\UtexasPantheonLogsHttpLogger $logs_http_logger */
  $logs_http_logger = \Drupal::service('utexas_pantheon_logs_http.utexas_pantheon_logs_http_logger');
  if (!$logs_http_logger->isEnabled()) {
    return;
  }
  if (!defined($logs_http_logger->getPantheonStunnel())) {
    // This is being executed on a non-Pantheon environment (e.g., locally).
    return;
  }
  // Return if no new events found.
  if (!$events = $logs_http_logger->getEvents()) {
    return;
  }
  // Return if no splunk token found.
  if ($logs_http_logger->getHttpHeaders() === '') {
    return;
  }

  $url = $logs_http_logger->getUrl();
  $host = parse_url($url, PHP_URL_HOST);
  $connect_to = [
    sprintf(
      "%s:443:127.0.0.1:%d",
      $host,
      constant($logs_http_logger->getPantheonStunnel())
    ),
  ];
  // Send events to logs.
  foreach ($events as $event) {
    $client = \Drupal::httpClient();

    try {
      // Send data to Logs.
      $client->post($url, [
        'json' => $event,
        'headers' => $logs_http_logger->getHttpHeaders(),
        'debug' => TRUE,
        'curl' => [
          CURLOPT_STDERR => fopen('php://stderr', 'w'),
          CURLOPT_CONNECT_TO => $connect_to,
          CURLOPT_URL => $url,
          CURLOPT_RETURNTRANSFER => TRUE,
          CURLOPT_SSL_VERIFYHOST => 2,
          CURLOPT_SSL_VERIFYPEER => TRUE,
          CURLOPT_CONNECTTIMEOUT => 5,
          CURLOPT_TIMEOUT => 30,
        ],
      ]);
    }
    catch (RequestException $e) {
      throw new UpdateException('Could not log action into Splunk.');
    }
  }
}
